/*
 * linux/drivers/staging/applite/applite_vconv_regs.h
 *
 * (C) Copyright TOSHIBA Corporation
 * Semiconductor & Storage Products Company 2012
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#if !defined(__VCONV_DRIVER_REGS_H__)
#define __VCONV_DRIVER_REGS_H__

#ifdef __cplusplus
extern "C" {
#endif	/* __cplusplus */

/*===================================
include Files
===================================*/
#include <linux/kernel.h>
#include <linux/cdev.h>
#include <linux/device.h>


/*===================================
Types and structures   defined
===================================*/

/* DEFINITION REGISTERS VALUES : VCONV */
#define VCONV_REG(reg)			(VCONV_VCONV_##reg##_OFFS)
#define VCONV_R_MASK(reg)		(VCONV_VCONV_##reg##_MASK)
#define VCONV_R_SHIFT(reg)		(VCONV_VCONV_##reg##_SHIFT)
#define VCONV_VAL(v, shift)		((__u32)v << VCONV_R_SHIFT(shift))

/* VCONV_START */
#define VCONV_START_ON			VCONV_VAL(1, START_START)
#define VCONV_START_CHANNEL0		VCONV_VAL(0, START_CHANNEL)
#define VCONV_START_CHANNEL1		VCONV_VAL(1, START_CHANNEL)

/* VCONV_ABORT */
#define VCONV_ABORT_ON			VCONV_VAL(1, ABORT_ABORT)

/* VCONV_SET_DUMMY_READ	*/
#define VCONV_DUMMY_READ_OFF		VCONV_VAL(0, SET_DUMMY_READ_DUMMY_READ)
#define VCONV_DUMMY_READ_ON		VCONV_VAL(1, SET_DUMMY_READ_DUMMY_READ)

/* VCONV_SET_BUFIF */
#define VCONV_OUTSTAND_CMD1		VCONV_VAL(1, SET_BUSIF_OUTSTAND_CMD)
#define VCONV_OUTSTAND_CMD2		VCONV_VAL(2, SET_BUSIF_OUTSTAND_CMD)
#define VCONV_OUTSTAND_CMD4		VCONV_VAL(4, SET_BUSIF_OUTSTAND_CMD)
#define VCONV_OUTSTAND_CMD8		VCONV_VAL(8, SET_BUSIF_OUTSTAND_CMD)

/* VCONV_SET_SEL_ALPHA */
#define VCONV_SET_SEL_ALPHA_MASK	VCONV_R_MASK(SET_SEL_ALPHA_SEL_ALPHA)
#define VCONV_SET_SEL_ALPHA_REG		VCONV_VAL(0, SET_SEL_ALPHA_SEL_ALPHA)
#define VCONV_SET_SEL_ALPAH_DATA	VCONV_VAL(1, SET_SEL_ALPHA_SEL_ALPHA)

/* VCONV_IRQ, VCONV_SET_IRQ_MASK */
#define VCONV_IRQ_FRAME_END		VCONV_VAL(1, IRQ_FRAME_END_IRQ)
#define VCONV_IRQ_START_ERROR		VCONV_VAL(1, IRQ_START_ERROR_IRQ)
#define VCONV_IRQ_REG_ERROR		VCONV_VAL(1, IRQ_REG_ERROR_IRQ)
#define VCONV_IRQ_DISP_ERROR		VCONV_VAL(1, IRQ_DISP_ERROR_IRQ)
#define VCONV_IRQ_MERGE_ERROR		VCONV_VAL(1, IRQ_MERGE_ERROR_IRQ)
#define VCONV_IRQ_ALL                   (VCONV_IRQ_FRAME_END | \
					 VCONV_IRQ_START_ERROR | \
					 VCONV_IRQ_REG_ERROR | \
					 VCONV_IRQ_DISP_ERROR | \
					 VCONV_IRQ_MERGE_ERROR)


/* VCONV_SET_Y2RMTX_OFFSET, VCONV_SET_R2YMTX_OFFSET */
#define VCONV_MTX_Y_MSK		VCONV_R_MASK(SET_Y2RMTX_OFFSET_Y2R_YOFFSET)
#define VCONV_MTX_C_MSK		VCONV_R_MASK(SET_Y2RMTX_OFFSET_Y2R_COFFSET)
#define VCONV_MTX_C_SHIFT	VCONV_R_SHIFT(SET_Y2RMTX_OFFSET_Y2R_COFFSET)
#define VCONV_OFFSET(y, c)		\
		(((y) & VCONV_MTX_Y_MSK) | \
		 (((__u32)(c) << VCONV_MTX_C_SHIFT) & VCONV_MTX_C_MSK))
#define VCONV_MK_OFFSET(yr)	VCONV_OFFSET((yr).y_offset, (yr).c_offset)

/* VCONV_SET_Y2RMTX_COEFxx, VCONV_SET_R2YMTX_COEFxx */
#define VCONV_MTX_COEF_MSK	VCONV_R_MASK(SET_Y2RMTX_COEF00_Y2R_COEF00)

/* VCONV_SET_RGBLIMIT, VCONV_SET_YLIMIT, VCONV_SET_CLIMIT */
#define VCONV_LIMIT_MAX_MSK	VCONV_R_MASK(SET_RGBLIMIT_Y2R_RGBMAX_LIMIT)
#define VCONV_LIMIT_MIN_MSK	VCONV_R_MASK(SET_RGBLIMIT_Y2R_RGBMIN_LIMIT)
#define VCONV_LIMIT_MIN_SHIFT	VCONV_R_SHIFT(SET_RGBLIMIT_Y2R_RGBMIN_LIMIT)
#define VCONV_LIMIT(a_max, a_min)		\
	(((a_max) & VCONV_LIMIT_MAX_MSK) | \
	 (((__u32)(a_min) < VCONV_LIMIT_MIN_SHIFT) & VCONV_LIMIT_MIN_MSK))
#define VCONV_MK_R_LIMIT(yr)		VCONV_LIMIT((yr).max, (yr).min)
#define VCONV_MK_Y_LIMIT(yr)		VCONV_LIMIT((yr).y_max, (yr).y_min)
#define VCONV_MK_C_LIMIT(yr)		VCONV_LIMIT((yr).c_max, (yr).c_min)

/* VCONV_TRANS_IN_FORMAT, VCONV_TRANS_OUT_FORMAT */
/* VCONV_SET_IN_FORMATx, VCONV_SET_OUT_FORMATx */
#define VCONV_COLORFORMAT_RGB		\
	VCONV_VAL(0, TRANS_IN_FORMAT_IN_COLORFORMAT)
#define VCONV_COLORFORMAT_YCBCR444	\
	VCONV_VAL(1, TRANS_IN_FORMAT_IN_COLORFORMAT)
#define VCONV_COLORFORMAT_YCBCR422	\
	VCONV_VAL(2, TRANS_IN_FORMAT_IN_COLORFORMAT)
#define VCONV_COLORFORMAT_YCBCR420	\
	VCONV_VAL(3, TRANS_IN_FORMAT_IN_COLORFORMAT)
#define VCONV_PLANE_1			VCONV_VAL(1, TRANS_IN_FORMAT_IN_PLANE)
#define VCONV_PLANE_2			VCONV_VAL(2, TRANS_IN_FORMAT_IN_PLANE)
#define VCONV_PLANE_3			VCONV_VAL(3, TRANS_IN_FORMAT_IN_PLANE)
#define VCONV_SCAN_RASTER		VCONV_VAL(0, TRANS_IN_FORMAT_IN_SCAN)
#define VCONV_SCAN_TILE			VCONV_VAL(1, TRANS_IN_FORMAT_IN_SCAN)
#define VCONV_FORMAT_ID_1		\
	VCONV_VAL(1, TRANS_IN_FORMAT_IN_FORMATID)
#define VCONV_FORMAT_ID_2		\
	VCONV_VAL(2, TRANS_IN_FORMAT_IN_FORMATID)
#define VCONV_FORMAT_ID_3		\
	VCONV_VAL(3, TRANS_IN_FORMAT_IN_FORMATID)
#define VCONV_FORMAT_ID_4		\
	VCONV_VAL(4, TRANS_IN_FORMAT_IN_FORMATID)
#define VCONV_FORMAT_ID_5		\
	VCONV_VAL(5, TRANS_IN_FORMAT_IN_FORMATID)


/* VCONV_TRANS_IN_HSIZE, VCONV_TRANS_OUT_HSIZE */
/* VCONV_TRANS_IN_VSIZE, VCONV_TRANS_OUT_VSIZE */
/* VCONV_SET_IN_HSIZEx, VCONV_SET_IN_VSIZEx */
/* VCONV_SET_OUT_HSIZEx, VCONV_SET_OUT_VSIZEx */
#define VCONV_SIZE_MSK			VCONV_R_MASK(TRANS_IN_HSIZE_IN_HSIZE)

/* VCONV_TRANS_IN_PITCH_x, VCONV_TRANS_OUT_PITCH_x */
/* VCONV_SET_IN_PITCH_xx, VCONV_SET_OUT_PITCH_xx */
#define VCONV_PITCH_MSK			\
	VCONV_R_MASK(TRANS_IN_PITCH_A_IN_PITCH_A)

/* VCONV_TRANS_OUT_HOFFSET, VCONV_TRANS_OUT_VOFFSET */
/* VCONV_SET_OUT_HOFFSETx, VCONV_SET_OUT_VOFFSETx */
#define VCONV_OUT_OFFSET_MSK		\
	VCONV_R_MASK(TRANS_OUT_VOFFSET_OUT_VOFFSET)

/* VCONV_TRANS_OUT_HSCALE, VCONV_TRANS_OUT_VSCALE */
/* VCONV_SET_OUT_HSCALEx, VCONV_SET_OUT_VSCALEx */
#define VCONV_SCALE_FRACTION_MSK	\
	VCONV_R_MASK(TRANS_OUT_HSCALE_HSCALE_FRACTON)
#define VCONV_SCALE_FRACTION_SHIFT	\
	VCONV_R_SHIFT(TRANS_OUT_HSCALE_HSCALE_FRACTON)
#define VCONV_SCALE_INTEGER_MSK		\
	VCONV_R_MASK(TRANS_OUT_HSCALE_HSCALE_INTEGER)
#define VCONV_SCALE_INTEGER_SHIFT	\
	VCONV_R_SHIFT(TRANS_OUT_HSCALE_HSCALE_INTEGER)
#define VCONV_SCALE(i, f)		\
	((((__u32)(i) << VCONV_SCALE_INTEGER_SHIFT) & \
	  VCONV_SCALE_INTEGER_MSK) | \
	 (((__u32)(f) << VCONV_SCALE_FRACTION_SHIFT) & \
	 VCONV_SCALE_FRACTION_MSK))
#define VCONV_MK_SCALE(s)		VCONV_SCALE((s).integer, (s).fraction)

/* VCONV_TRANS_OUT_HDELTA, VCONV_TRANS_OUT_VDELTA */
/* VCONV_SET_OUT_HDELTAx, VCONV_SET_OUT_VDELTAx */
#define VCONV_DELTA_MSK			VCONV_R_MASK(TRANS_OUT_HDELTA_HDELTA)

/* VCONV_TRANS_FORCE_MODE, VCONV_SET_FORCE_MODEx */
#define VCONV_FORCE_MODE_MSK		\
	VCONV_R_MASK(TRANS_FORCE_MODE_FORCE_MODE)
#define VCONV_FORCE_MODE_OFF		\
	VCONV_VAL(0, TRANS_FORCE_MODE_FORCE_MODE)
#define VCONV_FORCE_MODE_ON		\
	VCONV_VAL(1, TRANS_FORCE_MODE_FORCE_MODE)

/* VCONV_CH_FORCE_GY, VCONV_CH_FORCE_BCB */
/* VCONV_CH_FORCE_RCR, VCONV_CH_FORCE_A */
/* VCONV_SET_FORCE_GYx, VCONV_SET_FORCE_BCBx */
/* VCONV_SET_FORCE_RCRx, VCONV_SET_FORCE_Ax */
#define VCONV_FORCE_MSK			VCONV_R_MASK(CH_FORCE_GY_FORCE_GY)

/* VCONV_TRANS_CROP, VCONV_SET_CROPx */
#define VCONV_CROP_UPPER_MSK		VCONV_R_MASK(TRANS_CROP_CROP_UPPER)
#define VCONV_CROP_UPPER_SHIFT		VCONV_R_SHIFT(TRANS_CROP_CROP_UPPER)
#define VCONV_CROP_LOWER_MSK		VCONV_R_MASK(TRANS_CROP_CROP_LOWER)
#define VCONV_CROP_LOWER_SHIFT		VCONV_R_SHIFT(TRANS_CROP_CROP_LOWER)
#define VCONV_CROP_LEFT_MSK		VCONV_R_MASK(TRANS_CROP_CROP_LEFT)
#define VCONV_CROP_LEFT_SHIFT		VCONV_R_SHIFT(TRANS_CROP_CROP_LEFT)
#define VCONV_CROP_RIGHT_MSK		VCONV_R_MASK(TRANS_CROP_CROP_RIGHT)
#define VCONV_CROP_RIGHT_SHIFT		VCONV_R_SHIFT(TRANS_CROP_CROP_RIGHT)
#define VCONV_CROP(u, lwr, lft, r)	\
	((((__u32)(u) << VCONV_CROP_UPPER_SHIFT) & VCONV_CROP_UPPER_MSK) | \
	(((__u32)(lwr) << VCONV_CROP_LOWER_SHIFT) & VCONV_CROP_LOWER_MSK) | \
	(((__u32)(lft) << VCONV_CROP_LEFT_SHIFT) & VCONV_CROP_LEFT_MSK) | \
	(((__u32)(r) << VCONV_CROP_RIGHT_SHIFT) & VCONV_CROP_RIGHT_MSK))
#define VCONV_MK_CROP(c)		\
		VCONV_CROP((c).upper, (c).lower, (c).left, (c).right)


/* VCONV_TRANS_STATUS */
#define VCONV_TRANS_STATUS_IDLE		VCONV_VAL(0, TRANS_STATUS_TRUNS_STATUS)
#define VCONV_TRANS_STATUS_RUN		VCONV_VAL(1, TRANS_STATUS_TRUNS_STATUS)
#define VCONV_TRANS_CHANNEL0		VCONV_VAL(0, TRANS_STATUS_TRANS_CHANNEL)
#define VCONV_TRANS_CHANNEL1		VCONV_VAL(1, TRANS_STATUS_TRANS_CHANNEL)
#define VCONV_MERGE_STATUS_IDLE		VCONV_VAL(0, TRANS_STATUS_MERGE_STATUS)
#define VCONV_MERGE_STATUS_RUN		VCONV_VAL(1, TRANS_STATUS_MERGE_STATUS)

/* VCONV_TRANS_LINE */


/* DEFINITION REGISTERS VALUES : PMU */
#define PMU_REG(reg)			(PMU_##reg##_OFFS)
#define PMU_R_SHIFT(reg)		(PMU_##reg##_SHIFT)
#define PMU_VAL(v, shift)		((__u32)v << PMU_R_SHIFT(shift))

#define PMU_CG_ON_VCONV_RUN		\
	PMU_VAL(0, CLOCKGATINGON_VCONVSS_0_CG_ECLK_VCONV)
#define PMU_CG_ON_VCONV_STOP		\
	PMU_VAL(1, CLOCKGATINGON_VCONVSS_0_CG_ECLK_VCONV)
#define PMU_CG_OFF_VCONV_RUN		\
	PMU_VAL(1, CLOCKGATINGOFF_VCONVSS_0_CG_ECLK_VCONV)
#define PMU_CG_OFF_VCONV_STOP		\
	PMU_VAL(0, CLOCKGATINGOFF_VCONVSS_0_CG_ECLK_VCONV)
#define PMU_SR_ON_VCONV_ASSERT		\
	PMU_VAL(1, SOFTRESETON_VCONVSS_0_SRST_ASYNCERST_VCONV_N)
#define PMU_SR_ON_VCONV_DEASSERT	\
	PMU_VAL(0, SOFTRESETON_VCONVSS_0_SRST_ASYNCERST_VCONV_N)
#define PMU_SR_OFF_VCONV_ASSERT		\
	PMU_VAL(0, SOFTRESETON_VCONVSS_0_SRST_ASYNCERST_VCONV_N)
#define PMU_SR_OFF_VCONV_DEASSERT	\
	PMU_VAL(1, SOFTRESETON_VCONVSS_0_SRST_ASYNCERST_VCONV_N)


/*===================================
Exported Variables
===================================*/



/*===================================
Exported Functions prototypes
===================================*/

#ifdef __cplusplus
}
#endif	/* __cplusplus */

#endif	/* __VCONV_DRIVER_REGS_H__ */

